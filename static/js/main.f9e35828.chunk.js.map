{"version":3,"sources":["context/companies-context.js","components/Companies/Companies.js","components/Pagination/Pagination.js","components/Companies/CompaniesList.js","components/Companies/Company.js","App.js","index.js"],"names":["CompaniesContext","createContext","companies","searchCompany","searchedCompanies","loading","props","useState","setCompanies","setSearchedCompanies","dataLoaded","setDataLoaded","useEffect","companiesList","a","fetch","then","r","json","response","incomesDatas","i","length","id","push","newState","forEach","item","index","counter","incomes","el","Number","value","vv","Object","assign","totalIncomes","toFixed","sort","b","fetchData","Provider","name","filter","company","toLowerCase","includes","children","CompaniesList","list","useContext","map","key","city","Spinner","animation","to","pathname","params","Button","size","disabled","Table","striped","bordered","hover","className","responsive","Paginate","companiesPerPage","totalCompanies","paginate","active","activePage","items","number","Pagination","Item","onClick","Math","ceil","currentPage","setCurrentPage","touched","setTouched","IndexOfLastCompany","IndexOfFirstCompany","currentCompanies","slice","Form","Control","type","placeholder","onChange","e","target","inputChange","Companies","pageNumber","Company","totalCustomIncomes","setTotalCustomIncomes","averageCustomIncomes","setAverageCustomIncomes","Date","startDate","setStartDate","endDate","setEndDate","open","setOpen","showChart","setShowChart","options","chart","xaxis","categories","series","data","setChart","undefined","location","changePicker","date","picker","Card","Body","Title","Subtitle","Text","lastMonthIncomes","comp","getFullYear","getMonth","getLastMonthIncomes","aria-controls","aria-expanded","variant","dataPerMonth","incomesPerMonth","prev","getMonthlyIncomes","Collapse","in","customData","dates","getTime","getCustomData","selected","selectsStart","selectsEnd","minDate","history","style","width","App","Container","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9e35828.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\r\n\r\nexport const CompaniesContext = createContext({\r\n    companies: [],\r\n    searchCompany: () => { },\r\n    searchedCompanies: [],\r\n    loading: false\r\n})\r\n\r\nexport default props => {\r\n\r\n    const [companies, setCompanies] = useState([])\r\n    const [searchedCompanies, setSearchedCompanies] = useState([])\r\n    const [dataLoaded, setDataLoaded] = useState(false)\r\n\r\n    useEffect(() => {\r\n        let companiesList\r\n        async function fetchData() {\r\n            await fetch('https://recruitment.hal.skygate.io/companies')\r\n                .then(r => r.json())\r\n                .then(response => companiesList = response)\r\n            setCompanies(companiesList)\r\n            let incomesDatas = []\r\n            for (let i = 0; i < companiesList.length; i++) {\r\n                await fetch(`https://recruitment.hal.skygate.io/incomes/${companiesList[i].id}`)\r\n                    .then(r => r.json())\r\n                    .then(response => incomesDatas.push(response))\r\n            }\r\n            setCompanies(() => {\r\n                let newState = []\r\n                companiesList.forEach((item, index) => {\r\n                    let counter = 0\r\n                    incomesDatas[index].incomes.forEach(el => {\r\n                        counter += Number(el.value)\r\n                    })\r\n                    let vv = Object.assign(item, incomesDatas[index], { totalIncomes: counter.toFixed(2) })\r\n                    newState.push(vv)\r\n                    newState.sort((a, b) => {\r\n                        return b.totalIncomes - a.totalIncomes\r\n                    })\r\n                })\r\n                return newState\r\n            })\r\n            setDataLoaded(true)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const searchCompany = name => {\r\n        let newState = companies.filter(company => company.name.toLowerCase().includes(name))\r\n        setSearchedCompanies(newState)\r\n    }\r\n\r\n    return (\r\n        <CompaniesContext.Provider value={{ companies, searchCompany, searchedCompanies, dataLoaded }}>\r\n            {props.children}\r\n        </CompaniesContext.Provider>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { CompaniesContext } from '../../context/companies-context'\r\nimport { Button, Table, Spinner } from 'react-bootstrap';\r\n\r\nconst CompaniesList = ({ companies }) => {\r\n\r\n    const { dataLoaded } = useContext(CompaniesContext)\r\n\r\n    let list\r\n    if (companies.length !== 0) {\r\n        list = companies.map(company => {\r\n            return <tr key={company.id}>\r\n                <td>{company.id}</td>\r\n                <td>{company.name}</td>\r\n                <td>{company.city}</td>\r\n                <td>{(dataLoaded) ? company.totalIncomes : <Spinner animation=\"border\" />}</td>\r\n                <td >\r\n                    <Link to={{\r\n                        pathname: `/company/${company.id}`,\r\n                        params: {\r\n                            company\r\n                        }\r\n                    }}>\r\n                        <Button size=\"sm\" disabled={!dataLoaded}>View details</Button>\r\n                    </Link>\r\n                </td>\r\n            </tr >\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Table striped bordered hover size=\"sm\" className=\"text-center\" responsive=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Name</th>\r\n                        <th>City</th>\r\n                        <th>Total Incomes</th>\r\n                        <th>Details</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {list}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompaniesList;\r\n","import React from 'react';\r\n\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst Paginate = ({ companiesPerPage, totalCompanies, paginate, activePage }) => {\r\n    const active = activePage;\r\n    const items = []\r\n    for (let number = 1; number <= Math.ceil(totalCompanies / companiesPerPage); number++) {\r\n        items.push(\r\n            <Pagination.Item key={number} active={number === active} onClick={() => paginate(number)}>\r\n                {number}\r\n            </Pagination.Item>\r\n        );\r\n    }\r\n\r\n    return <Pagination className=\"d-flex flex-wrap\">\r\n        {items}\r\n    </Pagination>\r\n\r\n}\r\n\r\nexport default Paginate","import React, { useContext, useState } from 'react';\r\nimport { Form } from 'react-bootstrap'\r\n\r\nimport Companies from './Companies'\r\nimport Paginate from '../Pagination/Pagination'\r\nimport { CompaniesContext } from '../../context/companies-context'\r\n\r\nconst CompaniesList = () => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [companiesPerPage] = useState(10)\r\n\r\n    const { companies, searchedCompanies, searchCompany } = useContext(CompaniesContext)\r\n    const [touched, setTouched] = useState(false)\r\n\r\n    const inputChange = (e) => {\r\n        searchCompany(e.target.value)\r\n        if (e.target.value !== '') {\r\n            setTouched(true)\r\n            setCurrentPage(1)\r\n        } else {\r\n            setTouched(false)\r\n        }\r\n    }\r\n\r\n    if (searchedCompanies.length !== 0) {\r\n        searchedCompanies.sort((a, b) => b.totalIncomes - a.totalIncomes)\r\n    }\r\n\r\n    const IndexOfLastCompany = currentPage * companiesPerPage\r\n    const IndexOfFirstCompany = IndexOfLastCompany - companiesPerPage\r\n    const currentCompanies = (!touched ? companies.slice(IndexOfFirstCompany, IndexOfLastCompany) : searchedCompanies.slice(IndexOfFirstCompany, IndexOfLastCompany))\r\n\r\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\r\n\r\n    return <>\r\n        <Form.Control type=\"text\" className=\"my-3\" placeholder=\"Search company\" onChange={(e) => inputChange(e)} />\r\n        <Companies\r\n            companies={currentCompanies}\r\n        />\r\n        <Paginate\r\n            companiesPerPage={companiesPerPage}\r\n            totalCompanies={(searchedCompanies.length === 0 && !touched) ? companies.length : searchedCompanies.length}\r\n            paginate={paginate}\r\n            activePage={currentPage}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default CompaniesList","import React, { useState } from 'react';\r\nimport { Card, Button, Collapse } from 'react-bootstrap'\r\nimport { Redirect } from 'react-router-dom'\r\nimport DatePicker from 'react-datepicker'\r\nimport Chart from \"react-apexcharts\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst Company = (props) => {\r\n    const [totalCustomIncomes, setTotalCustomIncomes] = useState()\r\n    const [averageCustomIncomes, setAverageCustomIncomes] = useState()\r\n    const [startDate, setStartDate] = useState(new Date(\"2019/01/01\"));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [open, setOpen] = useState(false);\r\n    const [showChart, setShowChart] = useState(false)\r\n    const [chart, setChart] = useState({\r\n        options: {\r\n            chart: {\r\n                id: \"basic-bar\"\r\n            },\r\n            xaxis: {\r\n                categories: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n            }\r\n        },\r\n        series: [\r\n            {\r\n                name: \"\",\r\n                data: []\r\n            }\r\n        ]\r\n    })\r\n\r\n    if (props.location.params === undefined) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    const { company } = props.location.params\r\n\r\n    const getLastMonthIncomes = () => {\r\n        let lastMonthIncomes = 0\r\n        const data = new Date()\r\n        company.incomes.forEach((comp) => {\r\n            if ((new Date(comp.date).getFullYear() === data.getFullYear() - 1) && (new Date(comp.date).getMonth() === data.getMonth() - 1)) {\r\n                lastMonthIncomes += Number(comp.value)\r\n            }\r\n        })\r\n        return lastMonthIncomes\r\n    }\r\n\r\n    const getMonthlyIncomes = () => {\r\n        const dataPerMonth = []\r\n        for (let i = 0; i <= 11; i++) {\r\n            let incomesPerMonth = 0\r\n            company.incomes.forEach(el => {\r\n                if (new Date(el.date).getMonth() === i) {\r\n                    incomesPerMonth += Number(el.value)\r\n                }\r\n            })\r\n            dataPerMonth.push(incomesPerMonth.toFixed())\r\n        }\r\n        setChart(prev => {\r\n            return {\r\n                ...prev,\r\n                series: [{\r\n                    name: \"month-incomes\",\r\n                    data: dataPerMonth\r\n                }],\r\n            }\r\n        })\r\n        setShowChart(true)\r\n    }\r\n\r\n    const changePicker = (date, picker) => {\r\n        switch (picker) {\r\n            case 'startPicker':\r\n                setStartDate(date)\r\n                break;\r\n            case 'endPicker':\r\n                setEndDate(date)\r\n                break;\r\n            default:\r\n                setStartDate(new Date(\"2019/01/01\"))\r\n                setEndDate(new Date())\r\n        }\r\n    }\r\n\r\n    const getCustomData = () => {\r\n        let customData = []\r\n        customData = company.incomes.filter(el => {\r\n            const dates = new Date(el.date)\r\n            return (dates.getTime() > startDate.getTime()) && (dates.getTime() < endDate.getTime())\r\n        })\r\n        let totalCustomIncomes = 0\r\n        customData.forEach(el => {\r\n            totalCustomIncomes += Number(el.value)\r\n        })\r\n        setTotalCustomIncomes(totalCustomIncomes.toFixed(2))\r\n        setAverageCustomIncomes((totalCustomIncomes / customData.length).toFixed(2))\r\n    }\r\n\r\n    return <>\r\n        <Card className=\"my-4\">\r\n            <Card.Body>\r\n                <Card.Title>{company.name}</Card.Title>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">City: {company.city}</Card.Subtitle>\r\n                <Card.Text>Total Incomes: {company.totalIncomes}</Card.Text>\r\n                <Card.Text>Average Incomes: {(company.totalIncomes / company.incomes.length).toFixed(2)}</Card.Text>\r\n                <Card.Text>Last Month Incomes: {getLastMonthIncomes()}</Card.Text>\r\n                <Button\r\n                    onClick={() => setOpen(!open)}\r\n                    aria-controls=\"example-collapse-text\"\r\n                    aria-expanded={open}\r\n                >\r\n                    Show Custom Data\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"ml-3\" onClick={() => getMonthlyIncomes()}>Get Chart</Button>\r\n                <Collapse in={open}>\r\n                    <div id=\"example-collapse-text\">\r\n                        <Button variant=\"primary\" size=\"sm\" className=\"my-4 mx-2\" onClick={() => getCustomData()}>Get</Button>\r\n                        <DatePicker\r\n                            selected={startDate}\r\n                            onChange={date => changePicker(date, \"startPicker\")}\r\n                            selectsStart\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                        />\r\n                        <DatePicker\r\n                            selected={endDate}\r\n                            onChange={date => changePicker(date, \"endPicker\")}\r\n                            selectsEnd\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            minDate={startDate}\r\n                            className=\"ml-3\"\r\n                        />\r\n                        <Card.Text>Total Custom Incomes: {(!!totalCustomIncomes ? totalCustomIncomes : \"---\")}</Card.Text>\r\n                        <Card.Text>Average Custom Incomes: {!!averageCustomIncomes ? averageCustomIncomes : \"---\"}</Card.Text>\r\n                    </div>\r\n                </Collapse>\r\n                <div className=\"my-3\">\r\n                    <Button variant=\"outline-primary\" onClick={() => props.history.push(\"/\")}>Back to Main Page</Button>\r\n                </div>\r\n            </Card.Body>\r\n        </Card >\r\n        {showChart && <Chart\r\n            options={chart.options}\r\n            series={chart.series}\r\n            type=\"bar\"\r\n            style={{ width: \"100%\" }}\r\n        />}\r\n    </>\r\n\r\n}\r\n\r\nexport default Company","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Container } from 'react-bootstrap'\r\n\r\nimport './App.css';\r\nimport CompaniesProvider from './context/companies-context'\r\nimport CompaniesList from './components/Companies/CompaniesList'\r\nimport Company from './components/Companies/Company'\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Router>\r\n      <Container>\r\n        <CompaniesProvider>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <CompaniesList />\r\n            </Route>\r\n            <Route path=\"/company/:id\" component={Company} />>\r\n          </Switch>\r\n        </CompaniesProvider>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}